#include <iostream>
#include <vector>
using namespace std;
const int SIZE = 11;


class Figure {
public:
    virtual void draw(vector<vector<string>>& grid) = 0;
};


class Circle : public Figure {
private:
    void applyShape(vector<vector<string>>& grid, string shape[SIZE][SIZE]) {
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (shape[i][j] != "  ") {
                    grid[i][j] = shape[i][j];
                }
            }
        }
    }

public:

    void draw(vector<vector<string>>& grid) override {
        string c[SIZE][SIZE] = {
            {"  ","  ","  ","  ","[]","[]","[]","  ","  ","  ","  "},
            {"  ","  ","[]","[]","  ","  ","  ","[]","[]","  ","  "},
            {"  ","[]","  ","  ","  ","  ","  ","  ","  ","[]","  "},
            {"  ","[]","  ","  ","  ","  ","  ","  ","  ","[]","  "},
            {"[]","  ","  ","  ","  ","  ","  ","  ","  ","  ","[]"},
            {"[]","  ","  ","  ","  ","  ","  ","  ","  ","  ","[]"},
            {"[]","  ","  ","  ","  ","  ","  ","  ","  ","  ","[]"},
            {"  ","[]","  ","  ","  ","  ","  ","  ","  ","[]","  "},
            {"  ","[]","  ","  ","  ","  ","  ","  ","  ","[]","  "},
            {"  ","  ","[]","[]","  ","  ","  ","[]","[]","  ","  "},
            {"  ","  ","  ","  ","[]","[]","[]","  ","  ","  ","  "}
        };
        applyShape(grid, c);
    }
};


class Square : public Figure {
private:
    void applyShape(vector<vector<string>>& grid, string shape[SIZE][SIZE]) {
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (shape[i][j] != "  ") {
                    grid[i][j] = shape[i][j];
                }
            }
        }
    }

public:
    
    void draw(vector<vector<string>>& grid) override {
        string s[SIZE][SIZE] = {
            {"[]","[]","[]","[]","[]","[]","[]","[]","[]","[]","[]"},
            {"[]","  ","  ","  ","  ","  ","  ","  ","  ","  ","[]"},
            {"[]","  ","  ","  ","  ","  ","  ","  ","  ","  ","[]"},
            {"[]","  ","  ","  ","  ","  ","  ","  ","  ","  ","[]"},
            {"[]","  ","  ","  ","  ","  ","  ","  ","  ","  ","[]"},
            {"[]","  ","  ","  ","  ","  ","  ","  ","  ","  ","[]"},
            {"[]","  ","  ","  ","  ","  ","  ","  ","  ","  ","[]"},
            {"[]","  ","  ","  ","  ","  ","  ","  ","  ","  ","[]"},
            {"[]","  ","  ","  ","  ","  ","  ","  ","  ","  ","[]"},
            {"[]","  ","  ","  ","  ","  ","  ","  ","  ","  ","[]"},
            {"[]","[]","[]","[]","[]","[]","[]","[]","[]","[]","[]"}
        };
        applyShape(grid, s);
    }
};


class Triangle : public Figure {
private:
    void applyShape(vector<vector<string>>& grid, string shape[SIZE][SIZE]) {
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (shape[i][j] != "  ") {
                    grid[i][j] = shape[i][j];
                }
            }
        }
    }

public:
    void draw(vector<vector<string>>& grid) override {
        string t[SIZE][SIZE] = {
            {"  ","  ","  ","  ","  ","[]","  ","  ","  ","  ","  "},
            {"  ","  ","  ","  ","  ","[]","  ","  ","  ","  ","  "},
            {"  ","  ","  ","  ","[]","  ","[]","  ","  ","  ","  "},
            {"  ","  ","  ","  ","[]","  ","[]","  ","  ","  ","  "},
            {"  ","  ","  ","[]","  ","  ","  ","[]","  ","  ","  "},
            {"  ","  ","  ","[]","  ","  ","  ","[]","  ","  ","  "},
            {"  ","  ","[]","  ","  ","  ","  ","  ","[]","  ","  "},
            {"  ","  ","[]","  ","  ","  ","  ","  ","[]","  ","  "},
            {"  ","[]","  ","  ","  ","  ","  ","  ","  ","[]","  "},
            {"  ","[]","  ","  ","  ","  ","  ","  ","  ","[]","  "},
            {"[]","[]","[]","[]","[]","[]","[]","[]","[]","[]","[]"}
        };
        applyShape(grid, t);
    }
};


class CompositeFigure {
private:
    vector<vector<string>> grid;

public:

    CompositeFigure() {
        grid.resize(SIZE, vector<string>(SIZE, "  "));
    }


    void addFigure(Figure* fig) {
        fig->draw(grid);
    }


    void print() {
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                cout << grid[i][j];
            }
            cout << endl;
        }
    }
};


int main() {
    CompositeFigure composition;
    Circle circle;
    Square square;
    Triangle triangle;
    composition.addFigure(&circle);
    composition.addFigure(&square);
    composition.addFigure(&triangle);
    composition.print();
    return 0;
}
