#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;


class Client {
public:
    string name;
    bool isPriority;

    Client(string n, bool priority) {
        name = n;
        isPriority = priority;
    }
};

class BankQueue {
private:
    vector<Client> queue;

public:


    void addClient(string name, bool isPriority) {
        Client newClient(name, isPriority);
        queue.push_back(newClient);
        cout << "Клиент " << name << (isPriority ? " (приоритетный)" : " (обычный)") << " добавлен в очередь." << endl;
    }


    void serveNextClient() {
        if (!queue.empty()) {
            int highestPriorityIndex = -1;
            for (int i = 0; i < queue.size(); ++i) {
                if (queue[i].isPriority) {
                    highestPriorityIndex = i;
                    break; 
                }
            }
            if (highestPriorityIndex != -1) {
                cout << "Обслуживается клиент: " << queue[highestPriorityIndex].name << endl;
                queue.erase(queue.begin() + highestPriorityIndex);
            } 
            else {
                cout << "Обслуживается клиент: " << queue[0].name << endl;
                queue.erase(queue.begin());
            }
        } 
        else {
            cout << "Очередь пуста." << endl;
        }
    }


    void displayQueue() {
        cout << "Клиенты в очереди:" << endl;
        for (int i = 0; i < queue.size(); ++i) {
            cout << "- " << queue[i].name << (queue[i].isPriority ? " (приоритетный)" : " (обычный)") << endl;
        }
    }
};


int main() {
    BankQueue bankQueue;
    bankQueue.addClient("Алексей", false);
    bankQueue.addClient("Мария", true);
    bankQueue.addClient("Иван", false);
    bankQueue.addClient("Екатерина", true);
    bankQueue.displayQueue();
    for (int i = 0; i < 5; ++i) {
        bankQueue.serveNextClient();
    }
    return 0;
}
