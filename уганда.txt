#include <algorithm>
#include <chrono>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <fstream>
#include <iostream>
#include <random>
#include <sstream>
#include <stdlib.h>
#include <string>
#include <termios.h>
#include <thread>
#include <unistd.h>
#include <vector>
using namespace std;
// vector<int> ttm;
// cout << "\x1B[2J\x1B[H";

struct User {
  string username;
  string password;
  string role;
};

struct Tovar {
  string name;
  int price;
  string made;
  string count;
};

vector<User> loadUsers(string filename) {
  vector<User> users;
  ifstream file(filename);
  string line;
  getline(file, line);
  while (getline(file, line)) {
    stringstream ss(line);
    string username, password, role;
    getline(ss, username, ',');
    getline(ss, password, ',');
    getline(ss, role, ',');
    users.push_back({username, password, role});
  }
  return users;
}

vector<Tovar> loadTovar(string filename) {
  vector<Tovar> tovars;
  ifstream file(filename);
  string line;
  getline(file, line);
  while (getline(file, line)) {
    stringstream ss(line);
    string name, price, made, count;
    getline(ss, name, ',');
    getline(ss, price, ',');
    getline(ss, made, ',');
    getline(ss, count, ',');
    tovars.push_back({name, stoi(price), made, count});
  }
  return tovars;
}

vector<User> alltovars(vector<Tovar> tovars) {
  vector<User> alltovars;
  for (auto tovar : tovars) {
    cout << "Название товара: " << tovar.name << "| Цена: " << tovar.price
         << "| Страна изготовления: " << tovar.made
         << "| Товара на складе: " << tovar.count << endl;
  }
  return alltovars;
}

vector<Tovar> addtovar(vector<Tovar> tovars) {
  string name, price, made, count;
  cout << "Введите название товара: ";
  cin >> name;
  cout << "Введите цену товара: ";
  cin >> price;
  cout << "Введите страну изготовления товара: ";
  cin >> made;
  cout << "Введите количество товара: ";
  cin >> count;
  tovars.push_back({name, stoi(price), made, count});
  cout << "хотите добавить еще товар? ";
  string answer;
  cin >> answer;
  if (answer == "да") {
    return addtovar(tovars); 
  } 
  else {
    return tovars;
  }
}

vector<Tovar> deltovar(vector<Tovar> tovars) {
  string name, price, made, count;
  cout << "Введите название товара который хотите удалить: ";
  cin >> name;
  auto it = find_if(tovars.begin(), tovars.end(),
                    [&name](const Tovar &tovar) { return tovar.name == name; });
  if (it != tovars.end()) {
    tovars.erase(it);
  }
  return tovars;
}

int adminMenu(vector<User> users, vector<Tovar> tovar) {
  cout << "\n";
  cout << "Вы можете:\n";
  cout << "1.Посмотреть все товары\n ";
  cout << "2.Добавить товар\n ";
  cout << "3.Удалить товар\n ";
  cout << "4.Изменить товар\n ";
  cout << "5.Посмотреть всех пользователей\n ";
  int choice;
  cin >> choice;
  switch (choice) {
  case 1:
    alltovars(tovar);
    break;
  case 2:
    addtovar(tovar);
  case 3:
    break;
  case 4:
    break;
  case 5:
    break;
  }
  return 0;
}

int userMenu(vector<User> users, vector<Tovar> tovar) {
  bool tempRun = true;
  while (tempRun) {
    cout << "\n";
    cout << "Вы можете:\n";
    cout << "1.Все товары \n";
    cout << "2.Корзина \n";
    cout << "3.Купить \n";
    cout << "4.Выйти \n";
    int choice;
    cin >> choice;
    switch (choice) {
    case 1:
      alltovars(tovar);
      break;
    case 2:
      break;
    case 3:
      break;
    case 4:
      tempRun = false;
      break;
    }
  }
  return 0;
}

int main() {
  vector<User> users = loadUsers("dataBase.csv");
  vector<Tovar> tovars = loadTovar("tovar.csv");
  string username, password, role;
  cout << "Введите имя пользователя: ";
  cin >> username;
  cout << "Введите пароль: ";
  cin >> password;
  for (auto user : users) {
    if (user.username == username && user.password == password) {
      role = user.role;
      cout << "Роль пользователя " << user.username << " " << role;
      if (role == "admin") {
        adminMenu(users, tovars);
      }
      if (role == "user") {
        userMenu(users, tovars);
      }
      break;
    }
  }
  return 0;
}
