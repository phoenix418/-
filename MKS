#include <cstdlib>
#include <csignal>
#include <csetjmp>
#include <cstdarg>
#include <typeinfo>
#include <typeindex>
#include <type_traits>
#include <bitset>
#include <functional>
#include <utility>
#include <ctime>
#include <chrono>
#include <cstddef>
#include <initializer_list>
#include <tuple>
#include <new>
#include <memory>
#include <scoped_allocator>
#include <climits>
#include <cfloat>
#include <cstdint>
#include <cinttypes>
#include <limits>
#include <exception>
#include <stdexcept>
#include <cassert>
#include <system_error>
#include <cerrno>
#include <cctype>
#include <cwctype>
#include <cstring>
#include <cwchar>
#include <string>
#include <array>
#include <vector>
#include <deque>
#include <list>
#include <forward_list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <stack>
#include <queue>
#include <algorithm>
#include <iterator>
#include <cmath>
#include <complex>
#include <valarray>
#include <random>
#include <numeric>
#include <ratio>
#include <cfenv>
#include <iosfwd>
#include <ios>
#include <istream>
#include <ostream>
#include <iostream>
#include <fstream>
#include <sstream>
#include <iomanip>
#include <streambuf>
#include <cstdio>
#include <locale>
#include <clocale>
#include <codecvt>
#include <regex>
#include <atomic>
#include <thread>
#include <mutex>
#include <future>
#include <condition_variable>
#include <ciso646>
#include <ccomplex>
#include <ctgmath>
#include <cstdbool>
using namespace std;


class Astronaut {
private:
    string name;
    string specialization;
    int experience;
    string currentMission; 
public:
    Astronaut(string name, string specialization, int experience, string currentMission){
        this->name = name;
        this->specialization = specialization;
        this->experience = experience;
        this->currentMission = currentMission;
    }

    string getName(){
        return name;
    }

    void setName(string name){
        this->name = name;
    }

    string getSpecialization(){
        return specialization;
    }

    void setSpecialization(string specialization){
        this->specialization = specialization;
    }

    int getExperience(){
        return experience;
    }

    void setExperience(int experience){
        this->experience = experience;
    }

    string getCurrentMission(){
        return currentMission;
    }

    void setCurrentMission(string currentMission){
        this->currentMission = currentMission;
    }

    void increaseExperience() {
        experience++; 
    }

    void assignMission(const string& missionName) { 
        currentMission = missionName; 
    }

    void completeMission() { 
        currentMission = ""; 
        increaseExperience(); 
    }
};


class Module {
private:
    bool isDamaged = false;
    string name;
    string type;

public:
    Module(string name, string type, bool isDamaged){
        this->name = name;
        this->type = type;
        this->isDamaged = isDamaged;
    }

    string getName(){
        return name;
    }

    void setName(string name){
        this->name = name;
    }

    string getType(){
        return type;
    }

    void setType(string type){
        this->type = type;
    }

    bool getisDamaged(){
        return isDamaged;
    }

    void setDamaged(bool isDamaged){
        this->isDamaged = isDamaged;
    }

    void repair() { 
        isDamaged = false;
    }

    int updateStatus(){
        return isDamaged ? 0 : 1;
    }
};


class ScienceModule : public Module {
public:
    ScienceModule(string name, string type, bool isDamaged) : Module(name, type, isDamaged) {}
};


class HabitatModule : public Module {
public:
    HabitatModule(string name, string type, bool isDamaged) : Module(name, type, isDamaged) {}
};


class Resource {
private:
    string type;
    int amount;
    int cost;

public:
    Resource(string type, int amount, int cost){
        this->type = type;
        this->amount = amount;
        this->cost = cost;
    }

    string getType(){
        return type;
    }

void setType(string type){
        this->type = type;
    }

    int getAmount(){
        return amount;
    }

    void setAmount(int amount){
        this->amount = amount;
    }

    int getCost(){
        return cost;
    }

    void setCost(int cost){
        this->cost = cost;
    }
};


class SpaceStation {
private:
    vector<Astronaut> astronauts;
    vector<Module*> modules;
    vector<Resource> resources;
    vector<pair<string, string>> missions; 

public:
    SpaceStation() {}

    void addAstronaut(Astronaut& astronaut) {
        astronauts.push_back(astronaut);
    }

    void addModule(Module* module) {
        modules.push_back(module);
    }

    void addResource(Resource& resource) {
        resources.push_back(resource);
    }

    void addMission(string& missionName, string& description) {
        missions.push_back(make_pair(missionName, description));
    }

    void simulateDay() {
        for (auto& module : modules) {
            module->updateStatus();
        }

        for (auto& resource : resources) {
            resource.setAmount(resource.getAmount() - 1);
        }

        if (!missions.empty()) {
            missions.erase(missions.begin());
        }

        for (auto& astronaut : astronauts) {
            astronaut.increaseExperience();
        }

        if (rand() % 10 == 0) {
            for (auto& module : modules) {
                if (rand() % 2 == 0) {
                    module->setDamaged(true);
                }
            }
        } 
        else if (rand() % 10 == 1) {
            for (auto& astronaut : astronauts) {
                astronaut.setExperience(astronaut.getExperience() - 1);
            }
        } 
        else if (rand() % 10 == 2) {
            for (auto& resource : resources) {
                resource.setAmount(resource.getAmount() + 10);
            }
        }
    }

    void displayStatus() {
        cout << "Астронавты:" << endl;
        for (auto& astronaut : astronauts) {
            cout << "Имя: " << astronaut.getName() << endl;
            cout << "Специализация: " << astronaut.getSpecialization() << endl;
            cout << "Опыт: " << astronaut.getExperience() << endl;
            cout << "Текущая миссия: " << astronaut.getCurrentMission() << endl;
        }

        cout << "Модули:" << endl;
        for (auto& module : modules) {
            cout << "Имя: " << module->getName() << endl;
            cout << "Тип: " << module->getType() << endl;
            cout << "Статус: " << (module->getisDamaged() ? "Повреждён" : "Работает") << endl;
        }

        cout << "Ресурсы:" << endl;
        for (auto& resource : resources) {
            cout << "Тип: " << resource.getType() << endl;
            cout << "Количество: " << resource.getAmount() << endl;
        }

        cout << "Миссии:" << endl;
        for (auto& mission : missions) {
            cout << "Имя: " << mission.first << endl;
            cout << "Описание: " << mission.second << endl;
        }
    }

    bool checkWin() {
        for (auto& module : modules) {
            if (module->getisDamaged()) {
                return false;
            }
        }
        for (auto& resource : resources) {
            if (resource.getAmount() <= 0) {
                return false;
            }
        }
        return true;
    }

    bool checkLose() {
        for (auto& module : modules) {
            if (!module->getisDamaged()) {
                return false;
            }
        }
        for (auto& resource : resources) {
            if (resource.getAmount() > 0) {
                return false;
            }
        }
        return true;
    }
};


int main() {
    string name, specialization;
    int experience = 0;
    string currentMission = "";
     Astronaut astronaut(name, specialization, experience, currentMission);
    cout << "Имя: " << astronaut.getName() << endl;
    cout << "Специализация: " << astronaut.getSpecialization() << endl;
    cout << "Опыт: " << astronaut.getExperience() << endl;
    cout << "Текущая миссия: " << astronaut.getCurrentMission() << endl;
    astronaut.increaseExperience();
    cout << "Опыт: " << astronaut.getExperience() << endl;
    SpaceStation spaceStation; 
    spaceStation.addAstronaut(astronaut); 
    Resource oxygen("Кислород", 100, 10);
    spaceStation.addResource(oxygen);   
    Resource water("Вода", 50, 5);
    spaceStation.addResource(water);
    Resource food("Еда", 20, 2); 
    spaceStation.addResource(food);
    int choice;
    cout << "\nСимуляция космической станции" << endl;
    cout << "1. Добавить астронавта" << endl;
    cout << "2. Добавить модуль" << endl;
    cout << "3. Добавить ресурс" << endl;
    cout << "4. Добавить миссию" << endl;
    cout << "5. Симулировать день" << endl;
    cout << "6. Показать статус" << endl;
    cout << "7. Выйти" << endl;
    cout << "Введите ваш выбор: ";
    cin >> choice;
    switch (choice) {
        case 1: {
            string name, specialization;
            cout << "Введите имя астронавта: ";
            cin >> name;
            cout << "Введите специализацию астронавта: ";
            cin >> specialization;
            Astronaut astronaut(name, specialization, 0, "");             
            spaceStation.addAstronaut(astronaut);
            break;
        }
        case 2: {
            string name, type;
            bool isDamaged;
            cout << "Введите имя модуля: ";
            cin >> name;
            cout << "Введите тип модуля (Научный/Жилой): ";
            cin >> type;
            cout << "Модуль повреждён (true/false)? ";
            cin >> isDamaged;
            if (type == "Научный") {
                spaceStation.addModule(new ScienceModule(name, type, isDamaged));
                }
            else if (type == "Жилой") {
                spaceStation.addModule(new HabitatModule(name, type, isDamaged));
            } 
            else {
                cout << "Неверный тип модуля." << endl;
                }
            break;
        }
        case 3: {
            string type;
            int amount;
            cout << "Введите тип ресурса: ";
            cin >> type;
            cout << "Введите количество ресурса: ";
            cin >> amount;
            spaceStation.addResource(*new Resource(type, amount, 1));
            break;
            }
        case 4: {
            string missionName, description;
            cout << "Введите имя миссии: ";
            cin >> missionName;
            cout << "Введите описание миссии: ";
            cin >> description;
            spaceStation.addMission(missionName, description);
            break;
        }
        case 5: {
            spaceStation.simulateDay();
            break;
        }
        case 6: {
            spaceStation.displayStatus();
            break;
        }
        case 7: {
            cout << "Выход из симуляции." << endl;
            break;
        }
        default: {
            cout << "Неверный выбор." << endl;
        }
    }
    while (choice != 7);
    return 0;
}
