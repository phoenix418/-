using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;
using ConsoleApp3;
using static System.Console;


namespace ConsoleApp3
{ 
    class Program
    {

        static void ConvertToNumber()
        {
            while (true)
            {
                try
                {
                    Write("Введите число: ");
                    string userInput = ReadLine(); 
                    double number = Convert.ToDouble(userInput);
                    WriteLine($"Вы ввели число: {number}");
                    break; 
                }
                catch (FormatException)
                {
                    WriteLine("Ошибка: неверный формат ввода. Пожалуйста, введите корректное число.");
                }
                catch (OverflowException)
                {
                   WriteLine("Ошибка: число слишком большое или слишком маленькое для типа Double.");
                }
            }
        }

        static void DivideNumbers()
        {
            while (true)
            {
                try
                {
                    Write("Введите делимое: ");
                    double dividend = Convert.ToDouble(ReadLine());

                    Write("Введите делитель: ");
                    double divisor = Convert.ToDouble(ReadLine());

                    double result = dividend / divisor;
                    WriteLine($"Результат деления: {result}");
                    break; 
                }
                catch (DivideByZeroException)
                {
                    WriteLine("Ошибка: деление на ноль невозможно. Пожалуйста, введите другой делитель.");
                }
                catch (FormatException)
                {
                    WriteLine("Ошибка: необходимо ввести число. Попробуйте снова.");
                }
            }
        }


        static void AccessArrayElement()
        {
            int[] array = { 0, 1, 2, 3, 4 }; 
            while (true)
            {
                try
                {
                    Write("Введите индекс элемента (0-4): ");
                    int index = Convert.ToInt32(ReadLine());
                    WriteLine($"Элемент по индексу {index}: {array[index]}"); 
                    break; 
                }
                catch (IndexOutOfRangeException)
                {
                    WriteLine("Ошибка: некорректный индекс. Индекс должен быть в диапазоне от 0 до 4.");
                }
                catch (FormatException)
                {
                   WriteLine("Ошибка: необходимо ввести целое число. Попробуйте снова.");
                }
            }
        }

        class BankAccount
        {
            public double Balance { get;  set; }

            public BankAccount(double Balance)
            {
                this.Balance = Balance;
            }

            public void Withdraw(double amount)
            {
                if (amount > Balance)
                {
                    throw new InvalidOperationException("Недостаточно средств для снятия указанной суммы.");
                }
                Balance -= amount;
            }
        }


        static void Account()
        {
            BankAccount account = new BankAccount(100);

            while (true)
            {
                try
                {
                    Write("Введите сумму для снятия: ");
                    double amount = Convert.ToDouble(ReadLine());
                    account.Withdraw(amount);
                    WriteLine($"Успешно снято: {amount}. Остаток: {account.Balance}");
                    break;
                }
                catch (InvalidOperationException ex)
                {
                    WriteLine($"Ошибка: {ex.Message}");
                }
                catch (FormatException)
                {
                    WriteLine("Ошибка: необходимо ввести число. Попробуйте снова.");
                }
            }
        }

        static int ParseNumber()
        {
            WriteLine("Введите строку: ");
            string input = ReadLine();
            try
            {
                if (string.IsNullOrEmpty(input))
                    throw new ArgumentException($"Строка не может быть пустой {input} ");
                if (input.Length > 10)
                    throw new ArgumentException($"Строка слишком длинная {input} " );
                return int.Parse(input);
            }
            catch (ArgumentException a) when (a.ParamName == input && input.Length == 0)
            {
                Console.WriteLine("Ошибка: строка пустая");
                throw;
            }
            catch (ArgumentException a) when (input.Length > 10)
            {
                Console.WriteLine("Ошибка: строка превышает допустимую длину");
                throw;
            }
        }


         static void GuessNumber()
    {
            int correctNumber = new Random().Next(1, 101);
            int userGuess = 5;
            try
        {
                if (userGuess < 1)
                {
                    throw new ArgumentOutOfRangeException("userGuess", userGuess, "Число должно быть больше или равно 1.");
                }
                else if (userGuess > 100)
                {
                    throw new ArgumentOutOfRangeException("userGuess", userGuess, "Число должно быть меньше или равно 100.");
                }
                WriteLine(userGuess == correctNumber ? "Вы угадали!" : "Попробуйте еще раз.");
        }
        catch (ArgumentOutOfRangeException a) when (userGuess < 1 || userGuess > 100)
        {
            Console.WriteLine("Ошибка: число должно быть от 1 до 100");
            throw;
        }
    }

        static void CheckAccess() 
        {
            string role = "Гость";
            try
            {
                if (role == "Гость" || role == "Ограниченный доступ")
                    throw new UnauthorizedAccessException("Доступ запрещен");
                Console.WriteLine("Доступ разрешен");
            }
            catch (UnauthorizedAccessException a) when (role == "Гость" || role == "Ограниченный доступ")
            {
                Console.WriteLine("Ошибка: у вас недостаточно прав");
                throw;
            }
        }


        static int ReadArrayElement()
        {
            int[] array = { 1, 3, 4, 5, 6, 8, 9 };
            int index = 3;
            try
            {
                return array[index];
            }
            catch (IndexOutOfRangeException a) when (index == array.Length)
            {
                Console.WriteLine("Ошибка: индекс за границами массива (на 1 больше последнего элемента)");
                throw;
            }
        }

        static double SafeSqrt()
        {
            double number = 1.344334;
            try
            {
                if (number < 0)
                    throw new ArgumentException("Нельзя вычислить корень из отрицательного числа", nameof(number));
                return Math.Sqrt(number);
            }
            catch (ArgumentException a) when (number < -10)
            {
                Console.WriteLine("Ошибка: число слишком сильно выходит за допустимый диапазон");
                throw;
            }
        }

        static void Main()
        {
            while (true)
            {
                WriteLine("Введите номер задания: ");
                string num = ReadLine();
                int number = Convert.ToInt32(num);
                switch (number)
                {
                    case 1:
                        ConvertToNumber();
                        break;
                    case 2:
                        DivideNumbers();
                        break;
                    case 3:
                        AccessArrayElement();
                        break;
                    case 4:
                        Account();
                        break;
                    case 5:
                        ParseNumber();
                        break;
                    case 6:
                        GuessNumber();
                        break;
                    case 7:
                        CheckAccess();
                        break;
                    case 8:
                        ReadArrayElement();
                        break;
                    case 9:
                        SafeSqrt();
                        break;
                    default:
                        WriteLine("Неизвестное значение.");
                        break;
                }

            }
        }

    }
}
