#include <iostream>
using namespace std;

class Matrix {
private:
    int** data;
    int rows;
    int cols;

public:
    Matrix(int r, int c) : rows(r), cols(c) {
        data = new int*[rows];
        for (int i = 0; i < rows; ++i) {
            data[i] = new int[cols];
            for (int j = 0; j < cols; ++j) {
                data[i][j] = 0;
            }
        }
    }

    ~Matrix() {
        for (int i = 0; i < rows; ++i) {
            delete[] data[i];
        }
        delete[] data;
    }

    void display() const {
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                cout << data[i][j] << " ";
            }
            cout << endl;
        }
    }

    Matrix(const Matrix& other) {
        rows = other.rows;
        cols = other.cols;
        data = new int*[rows];
        for (int i = 0; i < rows; ++i) {
            data[i] = new int[cols];
            for (int j = 0; j < cols; ++j) {
                data[i][j] = other.data[i][j];
            }
        }
    }

 
    Matrix& operator=(const Matrix& other) {
        if (this != &other){ 
            for (int i = 0; i < rows; ++i) {
                delete[] data[i];
            }
            delete[] data;
            rows = other.rows;
            cols = other.cols;
            data = new int*[rows];
            for (int i = 0; i < rows; ++i) {
                data[i] = new int[cols];
                for (int j = 0; j < cols; ++j) {
                    data[i][j] = other.data[i][j];
                }
            }
        }
        return *this;
    }
};

int main() {
    Matrix mat1(3, 3);
    Matrix mat2(mat1); 
    Matrix mat3(mat1); 
    cout << "Матрица 1:" << endl;
    mat1.display();
    cout << "Матрица 2 (глубокое копирование):" << endl;
    mat2.display();
    cout << "Матрица 3 (глубокое копирование):" << endl;
    mat3.display();
    return 0;
}
